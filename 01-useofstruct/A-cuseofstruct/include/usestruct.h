#ifndef USESTRUCT_H
#define USESTRUCT_H

// ################################### type one  #################################
// 定义结构体type_one_s,此时结构体相当于一个类型，使用形式： type_one_s type_one1;
// C和C++中均可使用,在C中使用定义时，必须加struct，C++中不需要
struct type_one_s{
    int a;
    int b;
};
// ################################### type one end  #############################

// ################################### type two  #################################
// 定义结构体type_two_s，同时定义需要使用的变量type_two1;
// 如果之后还需要定义其他变量，定义形式：type_two_s type_two2; 
// 其实和上边的type one是一样的，不同的只是这种形式在定义结构体的同时定义了结构体变量
// C和C++中均可使用,使用方式同type one
struct type_two_s
{
    int a;
    int b;
}type_two1;
// ################################### type two end  #############################


// ################################### type  three   ###############################
// 定义结构体时，没有结构体名称，同时定义结构体变量type_three1,type_three2。
// 只能使用在定义结构体的同时定义的结构体变量，之后不能再定义别的结构体变量。
// C和C++中均可使用
struct {
    int a;
    int b;
}type_three1,type_three2;
// ################################### type  three  end  ###########################


// ################################### type  four   ###############################
// 定义结构体时，同时为结构体设置别名
// 可以使用结构体名和结构体别名定义结构体变量
// 使用结构体名定义变量时，C中需要加struct，C++不需要
// 使用结构体别名定义变量时，C和C++都不需要加struct
typedef struct type_four_s {
    int a;
    int b;
}type_four_alias_s;
// ################################### type  four  end  ###########################

// ################################### type  five type  ###########################
// 定义结构体时，缺失结构体名，只为结构体设置别名
// 可以使用结构体别名定义结构体变量
// 使用结构体别名定义变量，C和C++都不需要加struct
typedef struct{
    int a;
    int b;
}type_five_alias_s;
// ################################### type  five  end  ###########################

#endif